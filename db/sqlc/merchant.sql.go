// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: merchant.sql

package db

import (
	"context"
	"database/sql"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (admin_id,
                        name,
                        country_code)
VALUES ($1, $2, $3) RETURNING id, admin_id, name, country_code, created_at
`

type CreateMerchantParams struct {
	AdminID     int32  `json:"admin_id"`
	Name        string `json:"name"`
	CountryCode string `json:"country_code"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant, arg.AdminID, arg.Name, arg.CountryCode)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.AdminID,
		&i.Name,
		&i.CountryCode,
		&i.CreatedAt,
	)
	return i, err
}

const getMerchantByAdminID = `-- name: GetMerchantByAdminID :one
SELECT id, admin_id, name, country_code, created_at
FROM merchants
WHERE admin_id = $1 LIMIT 1
`

func (q *Queries) GetMerchantByAdminID(ctx context.Context, adminID int32) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchantByAdminID, adminID)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.AdminID,
		&i.Name,
		&i.CountryCode,
		&i.CreatedAt,
	)
	return i, err
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET
    name = COALESCE($1, name),
    country_code = COALESCE($2, country_code)
WHERE admin_id = $3 RETURNING id, admin_id, name, country_code, created_at
`

type UpdateMerchantParams struct {
	Name        sql.NullString `json:"name"`
	CountryCode sql.NullString `json:"country_code"`
	AdminID     int32          `json:"admin_id"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updateMerchant, arg.Name, arg.CountryCode, arg.AdminID)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.AdminID,
		&i.Name,
		&i.CountryCode,
		&i.CreatedAt,
	)
	return i, err
}
