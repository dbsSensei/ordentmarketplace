// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name,
                      merchant_id,
                      price,
                      status,
                      category_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, merchant_id, price, status, category_id, created_at
`

type CreateProductParams struct {
	Name       string `json:"name"`
	MerchantID int32  `json:"merchant_id"`
	Price      int32  `json:"price"`
	Status     string `json:"status"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.MerchantID,
		arg.Price,
		arg.Status,
		arg.CategoryID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MerchantID,
		&i.Price,
		&i.Status,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, merchant_id, price, status, category_id, created_at
FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MerchantID,
		&i.Price,
		&i.Status,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, merchant_id, price, status, category_id, created_at
FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MerchantID,
			&i.Price,
			&i.Status,
			&i.CategoryID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = COALESCE($1, name),
    price = COALESCE($2, price),
    status = COALESCE($3, status),
    category_id = COALESCE($4, category_id)
WHERE id = $5 AND merchant_id = $6 RETURNING id, name, merchant_id, price, status, category_id, created_at
`

type UpdateProductParams struct {
	Name       sql.NullString `json:"name"`
	Price      sql.NullInt32  `json:"price"`
	Status     sql.NullString `json:"status"`
	CategoryID sql.NullInt32  `json:"category_id"`
	ID         int32          `json:"id"`
	MerchantID int32          `json:"merchant_id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.Status,
		arg.CategoryID,
		arg.ID,
		arg.MerchantID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MerchantID,
		&i.Price,
		&i.Status,
		&i.CategoryID,
		&i.CreatedAt,
	)
	return i, err
}
